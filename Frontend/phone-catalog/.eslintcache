[{"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\App.js":"1","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\NotFound.js":"2","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\index.js":"3","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\services\\PhoneCatalogService.js":"4","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\Home.js":"5","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\reportWebVitals.js":"6","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\PhoneView.js":"7","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\AddPhone.js":"8"},{"size":832,"mtime":1610619945976,"results":"9","hashOfConfig":"10"},{"size":556,"mtime":1610624922093,"results":"11","hashOfConfig":"10"},{"size":288,"mtime":1610459018239,"results":"12","hashOfConfig":"10"},{"size":1233,"mtime":1610604737440,"results":"13","hashOfConfig":"10"},{"size":10708,"mtime":1610692275602,"results":"14","hashOfConfig":"10"},{"size":362,"mtime":1610208942922,"results":"15","hashOfConfig":"10"},{"size":12233,"mtime":1610655763318,"results":"16","hashOfConfig":"10"},{"size":11421,"mtime":1610628842111,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n5idl2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\App.js",[],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\NotFound.js",[],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\index.js",[],["38","39"],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\services\\PhoneCatalogService.js",[],["40","41"],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\Home.js",["42"],"// This is the home page which displays the list of phones. Users are initially routed to this page.\r\n\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport CardGroup from 'react-bootstrap/CardGroup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Phone } from 'react-bootstrap-icons';\r\nimport { TelephonePlus } from 'react-bootstrap-icons';\r\nimport { ArrowUp } from 'react-bootstrap-icons';\r\nimport { ArrowDown } from 'react-bootstrap-icons';\r\nimport PhoneCatalogService from '../services/PhoneCatalogService';\r\nimport Spinner from 'react-bootstrap/esm/Spinner';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Homepage\r\nclass Home extends React.Component {\r\n\r\n    // Set initial values\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dropValue: \"Order By\",\r\n            isLoading: true, isError: false,\r\n            phones: [], phonesTemp: []\r\n        }\r\n        this.onSearch = this.onSearch.bind(this);\r\n    }\r\n\r\n    // This method populates the phones list by making a call to the PhoneCatalogService\r\n    async componentDidMount() {\r\n        // Try sending request to REST API\r\n        try {\r\n            let result = await PhoneCatalogService.getCatalog();\r\n            if (result.status == 200) {\r\n                // If all good then render phones on screen\r\n                this.setState({ isLoading: false, phones: result.data, phonesTemp: result.data });\r\n            } else {\r\n                // Otherwise display an error message\r\n                this.setState({ isLoading: false, isError: true });\r\n            }\r\n            // If the app is unable to connect to the REST API\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({ isLoading: false, isError: true });\r\n        }\r\n    }\r\n\r\n    // Order phone list from lowest to highest price\r\n    onPriceAsc = () => {\r\n        this.setState({ dropValue: \"Price Ascending\", phones: this.state.phonesTemp.sort((a, b) => { return a.price - b.price }) });\r\n    }\r\n    // Order phone list from highest to lowest price\r\n    onPriceDesc = () => {\r\n        this.setState({ dropValue: \"Price Descending\", phones: this.state.phonesTemp.sort((a, b) => { return b.price - a.price }) });\r\n    }\r\n    // Order phones from oldest to newest\r\n    onDateAsc = () => {\r\n        this.setState({ dropValue: \"Date Ascending\", phones: this.state.phonesTemp.sort((a, b) => { return a.dateAdded < b.dateAdded ? -1 : 1 }) });\r\n    }\r\n    // Order phones from newest to oldest\r\n    onDateDesc = () => {\r\n        this.setState({ dropValue: \"Date Descending\", phones: this.state.phonesTemp.sort((a, b) => { return b.dateAdded < a.dateAdded ? -1 : 1 }) });\r\n    }\r\n\r\n    // This gets a list of phones matching the name that the user entered\r\n    onSearch(value) {\r\n        let tempPhones = [];\r\n        for (let i = 0; i < this.state.phonesTemp.length; i++) {\r\n            // If the phone's name contains the name entered then add it\r\n            if (this.state.phonesTemp[i].name.toLowerCase().includes(value.toLowerCase())) {\r\n                tempPhones.push(this.state.phonesTemp[i]);\r\n            }\r\n        }\r\n        this.setState({ phones: tempPhones }); // Render phones mathing criteria\r\n    }\r\n\r\n    render() {\r\n        // If an error occurred display error screen\r\n        if (this.state.isError) {\r\n            return <ErrorPage />;\r\n        }\r\n        return (\r\n            <div className=\"m-2\">\r\n                <NavTop\r\n                    dropValue={this.state.dropValue}\r\n                    onPriceAsc={this.onPriceAsc}\r\n                    onPriceDesc={this.onPriceDesc}\r\n                    onDateAsc={this.onDateAsc}\r\n                    onDateDesc={this.onDateDesc}\r\n                    onSearch={this.onSearch}\r\n                />\r\n                {this.state.isLoading && <Spinner className=\"mt-3\" animation=\"border\" />}\r\n                {!this.state.isLoading && <PhoneList phones={this.state.phones} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// React component responsible for building the list of phones\r\nconst PhoneList = (props) => {\r\n    let phonesList = [];\r\n    // Display two phones side by side using cards\r\n    for (let i = 1; i <= props.phones.length; i += 2) {\r\n        if (i < props.phones.length) {\r\n            phonesList.push(\r\n                <CardGroup>\r\n                    <Card className=\"my-2 mx-1\">\r\n                        <Card.Body>\r\n                            <Card.Title>{props.phones[i - 1].name}</Card.Title>\r\n                            <Card.Img src={props.phones[i - 1].imageFileName} />\r\n                        </Card.Body>\r\n                        <Card.Text className=\"mt-2 mx-2\"><strong>Description:</strong> {props.phones[i - 1].description}</Card.Text>\r\n                        <Card.Text><strong>Price:</strong> {props.phones[i - 1].price}</Card.Text>\r\n                        <Container>\r\n                            <Button className=\"mb-3\" variant=\"primary\">\r\n                                <Link style={{ textDecoration: 'none', color: 'white' }} to={{ pathname: \"/viewphone\", phone: props.phones[i - 1] }}>More Info / Update</Link>\r\n                            </Button>\r\n                        </Container>\r\n                        <Card.Footer>Date Added: {new Date(props.phones[i - 1].dateAdded).toUTCString()}</Card.Footer>\r\n                    </Card>\r\n                    <Card className=\"my-2 mx-1\">\r\n                        <Card.Body>\r\n                            <Card.Title>{props.phones[i].name}</Card.Title>\r\n                            <Card.Img src={props.phones[i].imageFileName} />\r\n                        </Card.Body>\r\n                        <Card.Text className=\"mt-2 mx-2\"><strong>Description:</strong> {props.phones[i].description}</Card.Text>\r\n                        <Card.Text><strong>Price:</strong> {props.phones[i].price}</Card.Text>\r\n                        <Container>\r\n                            <Button className=\"mb-3\" variant=\"primary\">\r\n                                <Link style={{ textDecoration: 'none', color: 'white' }} to={{ pathname: \"/viewphone\", phone: props.phones[i] }}>More Info / Update</Link>\r\n                            </Button>\r\n                        </Container>\r\n                        <Card.Footer>Date Added: {new Date(props.phones[i].dateAdded).toUTCString()}</Card.Footer>\r\n                    </Card>\r\n                </CardGroup>\r\n            );\r\n        } else if (i <= props.phones.length) {\r\n            phonesList.push(\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={6}>\r\n                            <Card className=\"my-2 mx-1\">\r\n                                <Card.Body>\r\n                                    <Card.Title>{props.phones[i - 1].name}</Card.Title>\r\n                                    <Card.Img src={props.phones[i - 1].imageFileName} />\r\n                                </Card.Body>\r\n                                <Card.Text className=\"mt-2 mx-2\"><strong>Description:</strong> {props.phones[i - 1].description}</Card.Text>\r\n                                <Card.Text><strong>Price:</strong> {props.phones[i - 1].price}</Card.Text>\r\n                                <Container>\r\n                                    <Button className=\"mb-3\" variant=\"primary\">\r\n                                        <Link style={{ textDecoration: 'none', color: 'white' }} to={{ pathname: \"/viewphone\", phone: props.phones[i - 1] }}>More Info / Update</Link>\r\n                                    </Button>\r\n                                </Container>\r\n                                <Card.Footer>Date Added: {new Date(props.phones[i - 1].dateAdded).toUTCString()}</Card.Footer>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n    return (\r\n        <Container>\r\n            {phonesList}\r\n        </Container>\r\n    );\r\n}\r\n\r\n// Top navigation bar which allows users to search and order the collection of phones\r\nclass NavTop extends React.Component {\r\n\r\n    // Set initial states\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { searchValue: \"\" };\r\n        this.search = this.search.bind(this);\r\n    }\r\n\r\n    // This calls its parent component Home to provide updated list of phones\r\n    search() {\r\n        this.props.onSearch(this.state.searchValue);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\r\n                <Navbar.Brand><Phone />Phone Catalog</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"/addphone\"><TelephonePlus /> Add new phone</Nav.Link>\r\n                        <NavDropdown title={this.props.dropValue} id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={this.props.onPriceAsc}>Price <ArrowUp /></NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={this.props.onPriceDesc}>Price <ArrowDown /></NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={this.props.onDateAsc}>Date Added <ArrowUp /></NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={this.props.onDateDesc}>Date Added <ArrowDown /></NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    <Form inline>\r\n                        <FormControl type=\"text\" onChange={e => this.setState({ searchValue: e.target.value })} placeholder=\"Enter phone name\" className=\"mr-sm-2\" />\r\n                        <Button variant=\"outline-dark\" onClick={this.search}>Search</Button>\r\n                    </Form>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\n// A simple error message display in case items weren't loaded correctly\r\nconst ErrorPage = () => {\r\n    return (\r\n        <Container>\r\n            <h2 className=\"m-2\">An error has occurred</h2>\r\n            <h4 className=\"m-2\">Please make sure that the REST API is running</h4>\r\n            <h4 className=\"m-2\">If the REST API is running, please try refreshing the page</h4>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\reportWebVitals.js",[],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\PhoneView.js",["43","44","45","46","47","48","49","50"],"// This page shows more details about a phone and allows you to update its values\r\n\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { Phone } from 'react-bootstrap-icons';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PhoneCatalogService from '../services/PhoneCatalogService';\r\n\r\n// Allows users to update and view a phone from the catalog\r\nclass PhoneView extends React.Component {\r\n\r\n    // Set initial states\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderImage = this.renderImage.bind(this);\r\n        this.readFile = this.readFile.bind(this);\r\n        this.state = {\r\n            phoneName: \"\", manufacturer: \"\", \r\n            description: \"\", color: \"\",\r\n            price: -1, imageURL: \"\", imageObj: null,\r\n            screen: \"\", processor: \"\", ram: -1,\r\n            showModal: false, isLoading: false,\r\n            updateVals: {}, redirect: false\r\n        };\r\n    }\r\n\r\n    // This displays the users selected picture and updates the image to be uploaded\r\n    renderImage(val) {\r\n        this.setState({\r\n            imageURL: URL.createObjectURL(val),\r\n            imageObj: val\r\n        });\r\n    }\r\n\r\n    // Used to display and hide the modal pop-up\r\n    handleClose = () => {this.setState({showModal: false});}\r\n    handleShow = () => {this.setState({showModal: true});}\r\n\r\n    // Converts the image to Base64 for easier upload\r\n    readFile(file) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = res => {\r\n                resolve(res.target.result);\r\n            };\r\n\r\n            reader.onerror = err => reject(err);\r\n\r\n            reader.readAsDataURL(file);\r\n        });\r\n    }\r\n\r\n    // If user confirms their intention with the modal pop-up\r\n    completeUpdate = async () => {\r\n        // Process the changes made\r\n        this.handleClose();\r\n\r\n        this.setState({isLoading: true});\r\n\r\n        // If user wants to update image\r\n        if (this.state.updateVals.imageFileName != null) {\r\n            // Encode the image\r\n            const contents = await this.readFile(this.state.updateVals.imageFileName);\r\n            this.state.updateVals.imageFileName = contents;\r\n        }\r\n\r\n        PhoneCatalogService.updatePhone(this.props.location.phone.id, this.state.updateVals).then(() => {\r\n            this.setState({updateVals: {}, isLoading: false});\r\n        });\r\n\r\n    }\r\n\r\n    // Remove this phone from the catalog perminently\r\n    handleDelete = () => {\r\n        this.setState({isLoading: true});\r\n\r\n        PhoneCatalogService.deletePhone(this.props.location.phone.id).then(() => {\r\n            this.setState({redirect: true}); // Go back to home page\r\n        })\r\n\r\n    }\r\n\r\n    // Creates an array of values that need updating and displays a confirmation pop up\r\n    handleUpdate = () => {\r\n\r\n        let tempVals = {};\r\n\r\n        if (this.state.phoneName != \"\") {\r\n            tempVals.name = this.state.phoneName;\r\n        }\r\n        if (this.state.manufacturer != \"\") {\r\n            tempVals.manufacturer = this.state.manufacturer;\r\n        }\r\n        if (this.state.description != \"\") {\r\n            tempVals.description = this.state.description;\r\n        }\r\n        if (this.state.color != \"\") {\r\n            tempVals.color = this.state.color;\r\n        }\r\n        if (this.state.price > 0) {\r\n            tempVals.price = this.state.price;\r\n        }\r\n        if (this.state.imageObj != null) {\r\n            tempVals.imageFileName = this.state.imageObj;\r\n        }\r\n        if (this.state.screen != \"\") {\r\n            tempVals.screen = this.state.screen;\r\n        }\r\n        if (this.state.processor != \"\") {\r\n            tempVals.processor = this.state.processor;\r\n        }\r\n        if (this.state.ram > 0) {\r\n            tempVals.ram = this.state.ram;\r\n        }\r\n\r\n        // If changes have been made\r\n        if (Object.keys(tempVals).length > 0) {\r\n            this.setState({updateVals: tempVals});\r\n\r\n            this.handleShow();\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirect) return <Redirect to=\"/\" />;\r\n        try {\r\n            let temp = this.props.location.phone.name; // Check that a phone has been passed to this address\r\n        } catch {\r\n            return <Redirect to=\"/invalid\" />; // If not, the user did not access this page through the appropriate link\r\n        }\r\n        return (\r\n            <Container>\r\n\r\n                <h2 class=\"mt-3\">View or update phone</h2>\r\n\r\n                <Modal\r\n                    show={this.state.showModal}\r\n                    onHide={this.handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Phone</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Are you sure you want to make changes to this phone?</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"danger\" onClick={this.handleClose}>No</Button>\r\n                        <Button variant=\"success\" onClick={this.completeUpdate}>Yes</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Form>\r\n\r\n                    <Container className=\"mt-3\">\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Phone name</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ phoneName: e.target.value })} placeholder={this.props.location.phone.name} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.phoneNameError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Manufacturer</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ manufacturer: e.target.value })} placeholder={this.props.location.phone.manufacturer} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.manufacturerError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Screen</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ screen: e.target.value })} placeholder={this.props.location.phone.screen} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.screenError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Processor</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ processor: e.target.value })} placeholder={this.props.location.phone.processor} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.processorError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    <Image src={this.state.imageURL == \"\" ? this.props.location.phone.imageFileName : this.state.imageURL} className=\"mb-3\" width=\"50%\" rounded />\r\n\r\n                    <Container>\r\n                        <Form.Group>\r\n                            <Form.File\r\n                                label=\"Select image of phone\"\r\n                                custom\r\n                                onChange={e => this.renderImage(e.target.files[0])}\r\n                            />\r\n                            <Form.Text className=\"text-danger\">{this.state.imageError}</Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={2} onChange={e => this.setState({ description: e.target.value })} placeholder={this.props.location.phone.description} />\r\n                            <Form.Text className=\"text-danger\">{this.state.descriptionError}</Form.Text>\r\n                        </Form.Group>\r\n                    </Container>\r\n\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Ram</Form.Label>\r\n                                    <Form.Control type=\"number\" onChange={e => this.setState({ ram: e.target.value })} placeholder={this.props.location.phone.ram} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.ramError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Price</Form.Label>\r\n                                    <Form.Control type=\"number\" onChange={e => this.setState({ price: e.target.value })} placeholder={this.props.location.phone.price} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.priceError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    {this.state.isLoading && <Alert variant=\"primary\">\r\n                        <Alert.Heading>Processing...</Alert.Heading>\r\n                        <p>Please be patient</p>\r\n                    </Alert>}\r\n\r\n                    <Container className=\"mb-3\">\r\n                        <Row>\r\n                            <Col>\r\n                                <Dropdown>\r\n                                    <Dropdown.Toggle variant=\"outline-dark\">{this.state.color === \"\" ? this.props.location.phone.color : this.state.color}</Dropdown.Toggle>\r\n                                    <Dropdown.Menu>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"Black\" })} >Black</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"Purple\" })} >Purple</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"Silver\" })} >Silver</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"White\" })} >White</Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                                <Form.Text className=\"text-danger\">{this.state.colorError}</Form.Text>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button variant=\"outline-danger\" onClick={this.handleDelete} type=\"button\">Delete Phone</Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button variant=\"outline-success\" onClick={this.handleUpdate} type=\"button\"><Phone /> Update Phone</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneView;","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\AddPhone.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":42,"column":31,"nodeType":"59","messageId":"60","endLine":42,"endColumn":33},{"ruleId":"57","severity":1,"message":"61","line":98,"column":34,"nodeType":"59","messageId":"60","endLine":98,"endColumn":36},{"ruleId":"57","severity":1,"message":"61","line":101,"column":37,"nodeType":"59","messageId":"60","endLine":101,"endColumn":39},{"ruleId":"57","severity":1,"message":"61","line":104,"column":36,"nodeType":"59","messageId":"60","endLine":104,"endColumn":38},{"ruleId":"57","severity":1,"message":"61","line":107,"column":30,"nodeType":"59","messageId":"60","endLine":107,"endColumn":32},{"ruleId":"57","severity":1,"message":"61","line":116,"column":31,"nodeType":"59","messageId":"60","endLine":116,"endColumn":33},{"ruleId":"57","severity":1,"message":"61","line":119,"column":34,"nodeType":"59","messageId":"60","endLine":119,"endColumn":36},{"ruleId":"62","severity":1,"message":"63","line":138,"column":17,"nodeType":"64","messageId":"65","endLine":138,"endColumn":21},{"ruleId":"57","severity":1,"message":"58","line":204,"column":53,"nodeType":"59","messageId":"60","endLine":204,"endColumn":55},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],["66"],["67"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]